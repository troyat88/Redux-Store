{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport { UPDATE_PRODUCTS, ADD_TO_CART, UPDATE_CART_QUANTITY, REMOVE_FROM_CART, ADD_MULTIPLE_TO_CART, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, CLEAR_CART, TOGGLE_CART } from './actions'; // The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      }); // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n\n    default:\n      return state;\n  }\n};\nexport function useProductReducer(initialState) {\n  _s();\n\n  return useReducer(reducer, initialState);\n}\n\n_s(useProductReducer, \"skVOqNGrFQuDFh+lpttAJ2AZFeA=\");","map":{"version":3,"sources":["/Users/Troy/Desktop/Redux Store/client/src/utils/reducers.js"],"names":["useReducer","UPDATE_PRODUCTS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","reducer","state","action","type","products","cartOpen","cart","product","map","_id","purchaseQuantity","newState","filter","length","categories","currentCategory","useProductReducer","initialState"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SACEC,eADF,EAEEC,WAFF,EAGEC,oBAHF,EAIEC,gBAJF,EAKEC,oBALF,EAMEC,iBANF,EAOEC,uBAPF,EAQEC,UARF,EASEC,WATF,QAUO,WAVP,C,CAgBA;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKZ,eAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAX;AAFL,OAAP;;AAKF,SAAKZ,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELI,QAAAA,QAAQ,EAAE,IAFL;AAGLC,QAAAA,IAAI,EAAE,CAAC,GAAGL,KAAK,CAACK,IAAV,EAAgBJ,MAAM,CAACK,OAAvB;AAHD,OAAP;;AAKF,SAAKZ,oBAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELK,QAAAA,IAAI,EAAE,CAAC,GAAGL,KAAK,CAACK,IAAV,EAAgB,GAAGJ,MAAM,CAACE,QAA1B;AAFD,OAAP;AAIF;AACA;;AACA,SAAKX,oBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELI,QAAAA,QAAQ,EAAE,IAFL;AAGLC,QAAAA,IAAI,EAAEL,KAAK,CAACK,IAAN,CAAWE,GAAX,CAAgBD,OAAD,IAAa;AAChC,cAAIL,MAAM,CAACO,GAAP,KAAeF,OAAO,CAACE,GAA3B,EAAgC;AAC9BF,YAAAA,OAAO,CAACG,gBAAR,GAA2BR,MAAM,CAACQ,gBAAlC;AACD;;AACD,iBAAOH,OAAP;AACD,SALK;AAHD,OAAP;AAWF;AACA;;AACA,SAAKb,gBAAL;AACE,UAAIiB,QAAQ,GAAGV,KAAK,CAACK,IAAN,CAAWM,MAAX,CAAmBL,OAAD,IAAa;AAC5C,eAAOA,OAAO,CAACE,GAAR,KAAgBP,MAAM,CAACO,GAA9B;AACD,OAFc,CAAf,CADF,CAKE;AACA;;AACA,aAAO,EACL,GAAGR,KADE;AAELI,QAAAA,QAAQ,EAAEM,QAAQ,CAACE,MAAT,GAAkB,CAFvB;AAGLP,QAAAA,IAAI,EAAEK;AAHD,OAAP;;AAMF,SAAKb,UAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELI,QAAAA,QAAQ,EAAE,KAFL;AAGLC,QAAAA,IAAI,EAAE;AAHD,OAAP;;AAMF,SAAKP,WAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELI,QAAAA,QAAQ,EAAE,CAACJ,KAAK,CAACI;AAFZ,OAAP;;AAKF,SAAKT,iBAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELa,QAAAA,UAAU,EAAE,CAAC,GAAGZ,MAAM,CAACY,UAAX;AAFP,OAAP;;AAKF,SAAKjB,uBAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELc,QAAAA,eAAe,EAAEb,MAAM,CAACa;AAFnB,OAAP;AAKF;AACA;;AACA;AACE,aAAOd,KAAP;AA5EJ;AA8ED,CA/EM;AAiFP,OAAO,SAASe,iBAAT,CAA2BC,YAA3B,EAAyC;AAAA;;AAC9C,SAAO3B,UAAU,CAACU,OAAD,EAAUiB,YAAV,CAAjB;AACD;;GAFeD,iB","sourcesContent":["import { useReducer } from 'react';\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\n\n\n\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\n\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n"]},"metadata":{},"sourceType":"module"}