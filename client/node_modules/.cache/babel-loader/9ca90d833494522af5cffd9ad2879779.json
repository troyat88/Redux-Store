{"ast":null,"code":"var _jsxFileName = \"/Users/Troy/Desktop/Redux Store/client/src/components/CategoryMenu/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client'; //import { useStoreContext } from '../../utils/GlobalState';\n\nimport { useDispatch } from 'react-redux';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CategoryMenu() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choose a Category:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), categories.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        handleClick(item._id);\n      },\n      children: item.name\n    }, item._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CategoryMenu, \"PcwDvYCxf/NoZA8J4S+LtubhYfo=\", false, function () {\n  return [useDispatch, useQuery];\n});\n\n_c = CategoryMenu;\nexport default CategoryMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryMenu\");","map":{"version":3,"sources":["/Users/Troy/Desktop/Redux Store/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","useDispatch","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","QUERY_CATEGORIES","idbPromise","CategoryMenu","dispatch","loading","data","categoryData","type","categories","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB,C,CACA;;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SACEC,iBADF,EAEEC,uBAFF,QAGO,qBAHP;AAIA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,UAAT,QAA2B,qBAA3B;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACtB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAIA,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAAkCV,QAAQ,CAACI,gBAAD,CAAhD;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,YAAJ,EAAkB;AAChBH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAET,iBADC;AAEPU,QAAAA,UAAU,EAAEF,YAAY,CAACE;AAFlB,OAAD,CAAR;AAIAF,MAAAA,YAAY,CAACE,UAAb,CAAwBC,OAAxB,CAAiCC,QAAD,IAAc;AAC5CT,QAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBS,QAAtB,CAAV;AACD,OAFD;AAGD,KARD,MAQO,IAAI,CAACN,OAAL,EAAc;AACnBH,MAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,CAAV,CAAgCU,IAAhC,CAAsCH,UAAD,IAAgB;AACnDL,QAAAA,QAAQ,CAAC;AACPI,UAAAA,IAAI,EAAET,iBADC;AAEPU,UAAAA,UAAU,EAAEA;AAFL,SAAD,CAAR;AAID,OALD;AAMD;AACF,GAjBQ,EAiBN,CAACF,YAAD,EAAeF,OAAf,EAAwBD,QAAxB,CAjBM,CAAT;;AAmBA,QAAMS,WAAW,GAAIC,EAAD,IAAQ;AAC1BV,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAER,uBADC;AAEPe,MAAAA,eAAe,EAAED;AAFV,KAAD,CAAR;AAID,GALD;;AAOA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGL,UAAU,CAACO,GAAX,CAAgBC,IAAD,iBACd;AAEE,MAAA,OAAO,EAAE,MAAM;AACbJ,QAAAA,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX;AACD,OAJH;AAAA,gBAMGD,IAAI,CAACE;AANR,OACOF,IAAI,CAACC,GADZ;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAhDQf,Y;UACUL,W,EAIuBD,Q;;;KALjCM,Y;AAkDT,eAAeA,YAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch } from 'react-redux';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const dispatch = useDispatch();\n\n\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}